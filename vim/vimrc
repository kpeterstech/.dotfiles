set nocompatible              " be iMproved, required
filetype off                  " required

call plug#begin()

" The default plugin directory will be as follows:
"   - Vim (Linux/macOS): '~/.vim/plugged'
"
" ----------
" PLUGIN
" ----------
  Plug 'scrooloose/nerdtree'		"Added nerdtree a file manager within vim
  Plug 'flazz/vim-colorschemes'		"Color Schemes for Vim
  Plug 'vim-airline/vim-airline'	"adds powerbar at the bottom of vim
  Plug 'vim-airline/vim-airline-themes'	"adds themes for powerbar
  Plug 'easymotion/vim-easymotion'	"allows for jumping to other words quickly with <leader> <leader> w
  Plug 'ctrlpvim/ctrlp.vim'		"fuzzy finder for vim
  Plug 'elzr/vim-json'			"highlighting for JSON
  Plug 'preservim/nerdcommenter'	" allows for quick commenting with <leader> cc
  Plug 'neoclide/coc.nvim', {'branch': 'release'}	" Code Completion Plugin
  Plug 'ryanoasis/vim-devicons'

" All of your Plugins must be added above this comment

call plug#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" Put your non-Plugin stuff after this line

"------------
" Plugin Options
"------------

"***********
"NERDTree
"***********

" Tell NERDTree to display hidden files on startup
let NERDTreeShowHidden=1

"opens files into new tab
let NERDTreeMapOpenInTab='<SPACE>'

" Enables toggle for NERDTree with ctrl+n in normal mode
map <silent> <C-n> :NERDTreeToggle<CR>

"***********
"vim-airline
"***********

" set airline to be on all the time
set laststatus=2

" tells airline to use powerline fonts
let g:airline_powerline_fonts = 1

" lowers the time while leaving from insert mode to normal mode
set ttimeoutlen=10

"************
"Ctrl-P
"************

" lets Ctrl-P show hidden files
let g:ctrlp_show_hidden = 1

"************
"EazyMotion
"************
"
"you call easy motion by hitting leader twice then w. <leader> <leader> w.
"This searches forward for the next word

"if you want to search backwards, it is <leader> <leader> F.
"you then enter in the first letter of the word you want to go to and it shows
"the optional jump points

"************
"Nerdcommenter
"************

filetype plugin on

"[count]<leader>cc |NERDCommenterComment|

"Comment out the current line or text selected in visual mode.

"[count]<leader>cn |NERDCommenterNested|

"Same as cc but forces nesting.

"[count]<leader>c<space> |NERDCommenterToggle|

"Toggles the comment state of the selected line(s). If the topmost selected line is commented, all selected lines are uncommented and vice versa.

"[count]<leader>cm |NERDCommenterMinimal|

"Comments the given lines using only one set of multipart delimiters.

"[count]<leader>ci |NERDCommenterInvert|

"Toggles the comment state of the selected line(s) individually.

"[count]<leader>cs |NERDCommenterSexy|

"Comments out the selected lines with a pretty block formatted layout.

"[count]<leader>cy |NERDCommenterYank|

"Same as cc except that the commented line(s) are yanked first.

"<leader>c$ |NERDCommenterToEOL|

"Comments the current line from the cursor to the end of line.

"<leader>cA |NERDCommenterAppend|

"Adds comment delimiters to the end of line and goes into insert mode between them.

"|NERDCommenterInsert|

"Adds comment delimiters at the current cursor position and inserts between. Disabled by default.

"<leader>ca |NERDCommenterAltDelims|

"Switches to the alternative set of delimiters.

"[count]<leader>cl |NERDCommenterAlignLeft [count]<leader>cb |NERDCommenterAlignBoth

"Same as |NERDCommenterComment| except that the delimiters are aligned down the left side (<leader>cl) or both sides (<leader>cb).

"[count]<leader>cu |NERDCommenterUncomment|

"Uncomments the selected line(s).
"
""************
"Conquor of Completion
"************

set nobackup
set nowritebackup

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

"--------------
"Regular Options
"--------------

"<CR>        carriage return. It means that you press enter. You put it at the
"end of a command so it simulates you pressing enter and the command runs
"<Return>    same as <CR>
"<Enter>     same as <CR>

"to paste from the keyboard buffer, set vim to paste mode with ":set paste".
"This will turn off indenting. When done pasting turn it off again with
":set nopaste"

"sets encoding to utf-8
set encoding=UTF-8

" adds syntax
syntax on

" shows commands on the bottom right
set showcmd

set mouse=a

" map the leader key to ","
let mapleader = ","

"enables tabs within vim
nnoremap tn	:tabnew<CR>

nnoremap tk	:tabnext<CR>
nnoremap tj	:tabprev<CR>

nnoremap th	:tabfirst<CR>
nnoremap tl	:tablast<CR>

" adds numbering on the left side, both relative and absolute
set number
set relativenumber

" turns on indenting
set autoindent
set smartindent

" Disable swp files
set noswapfile

" gives 256 color schemes
set term=screen-256color

"quick pairs - while in insert mode, press leader than the character to create
"both sides and place the cursor in between them
imap <leader>' ''<ESC>i
imap <leader>" ""<ESC>i
imap <leader>( ()<ESC>i
imap <leader>[ []<ESC>i
imap <leader>{ {}<ESC>i

" For quick f-strings in python
imap <leader>f" f""<ESC>i
imap <leader>f' f''<ESC>i

" gO to create a new line below the cursor in normal mode with going into
" insert mode
nnoremap g<C-O> o<ESC>k

" g<Ctrl+O> to create a new line above the cursor, but without going into
" insert mode.
nnoremap gO O<ESC>j

" enables cross copy/pasting with system clipboard
set clipboard=unnamedplus

"if you are pasting from the clipboard set vim into paste mode with
":set paste. This tells vim not to do indentations so your code wont get
"messed up. To turn vim back into normal mode use :set nopaste

" turns on highlighting of words when searching
set hlsearch

" case insensitive searching
set ignorecase

" case-sensitive if expresson contains a capital letter
set smartcase

" turns the highlight background color light blue, only for vim in terminal
hi Search ctermbg=LightBlue

" toggle invisible characters
set list
set listchars=tab:\ \ ,eol:¬,trail:⋅

"sets files to ignore
set wildignore+=*.bmp,*.gif,*.jpg,*.webm,*.mp4,*.png,*.swp,*.tmp,*.git,*.DS_Store

"adds PEP8 indentation for python

au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
"\ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |

"adds indentation for js, html and css

au BufNewFile,BufRead *.js, *.html, *.css
    \ set tabstop=2
    \ set softtabstop=2
    \ set shiftwidth=2



